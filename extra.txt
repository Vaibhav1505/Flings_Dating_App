 ListTile(
      tileColor: Colors.transparent,
      leading: icon,
      title: Text(cardTitle),
    );

//JSON ENCODE
import 'dart:convert';

void main() {
  final products = [
    {'id': 1, 'name': 'Product #1'},
    {'id': 2, 'name': 'Product #2'}
  ];

  print(json.encode(products));
}
O/P==>
[{"id":1,"name":"Product #1"},{"id":2,"name":"Product #2"}]


//JSON DECODE
void main() {
  const String responseData =
      '[{"id":1,"name":"Product #1"},{"id":2,"name":"Product #2"}]';

  final products = json.decode(responseData);

  if (kDebugMode) {
    // Print the type of "products"
    print(products.runtimeType);

    // Print the name of the second product in the list
    print(products[1]['name']);
  }
}
O/P==>
List<dynamic>
Product #2



//GET REQUEST
 void fetchUserData() async {
    print("Fetching User Data");
    const url = 'https://randomuser.me/api/?results=50';
    final baseURL = Uri.parse(url);
    final res = await http.get(baseURL);
    final body = res.body;
    final jsonData = jsonDecode(body);
    final results = jsonData['results'] as List<dynamic>;

    setState(() {
      users = results.map((e) {
        final username = Username(
            title: e['name']['title'],
            first: e['name']['first'],
            last: e['name']['last']);

        return User(
            email: e['email'],
            gender: e['gender'],
            phone: e['phone'],
            nat: e["nat"],
            name: username);
      }).toList();
    });
    print("Fetching Completed");
  }

class you{

String name;
Strnig age

  you({ required this.name,required this.age})
}

 Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const OTPFillingPage(),
              settings: RouteSettings(
                arguments: phoneNumber.text,
              ),
            ));



            final args =
        ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>;
    final jsonDecodedData = jsonDecode(args.toString());
    final phone = jsonDecodedData['phone'];
    Future<void> matchOTP(String otp) async {
      print("otp function");

      if (otp.isNotEmpty) {
        var respones = await http.post(
            Uri.parse("http://192.168.1.24:5000/authenticate"),
            headers: {"Content-Type": "application/json"},
            body: jsonEncode({'candidateKey': otp, 'phone': phone}));
        print('this is respomse');

        var body = json.decode(respones.body);
        print("Body:" + body);
      } else {
        print("Wrong OTP or Unable to Login");
      }
    }



//{================BASIC INFORMATION SECTION=====================}
Container(
      width: double.infinity,
      child: Column(
        children: [
          Row(
            children: [
              Text(
                "Basic Info",
                style: TextStyle(
                    fontWeight: FontWeight.w900,
                    fontSize: 35,
                    foreground: Paint()..shader = MyTheme.linearGradientColor),
              )
            ],
          ),
          SizedBox(height: 20),
          Column(
            children: [
              Row(
                children: [
                  Text(
                    "About you",
                    textAlign: TextAlign.end,
                  ),
                ],
              ),
              CustomInputField(
                  hintText: "Enter something about yourself",
                  borderRadius: 10,
                  labelText: "Enter your Bio",
                  borderColor: Colors.transparent)
            ],
          ),
          SizedBox(height: 20),
          Column(
            children: [
              Row(
                children: [
                  Text(
                    "Job Title",
                  ),
                ],
              ),
              CustomInputField(
                  hintText: "Enter something about your Job",
                  borderRadius: 50,
                  labelText: '',
                  borderColor: Colors.transparent)
            ],
          ),
          SizedBox(height: 20),
          Column(
            children: [
              Row(
                children: [
                  Text(
                    "About you",
                  ),
                ],
              ),
              CustomInputField(
                  hintText: "Enter something about yourself",
                  borderRadius: 50,
                  labelText: "",
                  borderColor: Colors.transparent)
            ],
          ),
          SizedBox(
            height: 25,
          ),
          Expanded(
            child: CustomListTile(
              backgroundColor: Colors.black,
              leadingText: "Educational Level",
              titleColor: Colors.white,
              borderRadius: 50,
              leadingWidget: Icon(
                Icons.school,
                color: Colors.white,
              ),
              trailingWidget: widget.selectedEducation != null
                  ? Text(
                      widget.selectedEducation!,
                      style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                          fontSize: 15),
                    )
                  : OnPressedButton(
                      buttonText: "Add",
                      buttonTextColor: Colors.white,
                      onpressed: () {
                        showDialog(
                            context: context,
                            builder: (context) {
                              return CustomDialogBox(
                                title: "Select your maixmum Educational Level",
                                options: educationOptions,
                                onOptionSelected: (option) {
                                  setState(() {
                                    selectedEducation = option;
                                  });
                                  Navigator.pop(context);
                                },
                              );
                            });
                        print("religion dialog box opend");
                      },
                      buttonPadding: 15,
                      buttonColor: Colors.transparent,
                      buttonBorderRadius: 50,
                      buttonIcon: Icon(
                        Icons.add,
                        color: Colors.white,
                      )),
            ),
          ),
          SizedBox(
            height: 15,
          ),
          Expanded(
            child: CustomListTile(
              leadingText: "Religion",
              borderRadius: 50,
              titleColor: Colors.white,
              backgroundColor: Colors.black,
              leadingWidget: Icon(
                CupertinoIcons.add_circled_solid,
                color: Colors.white,
              ),
              trailingWidget: widget.selectedReligion != null
                  ? Text(
                      widget.selectedReligion!,
                      style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                          fontSize: 15),
                    )
                  : OnPressedButton(
                      buttonText: "Add",
                      buttonTextColor: Colors.white,
                      onpressed: () {
                        showDialog(
                            context: context,
                            builder: (context) {
                              return CustomDialogBox(
                                title: "Select your reoligion",
                                options: religionOptions,
                                onOptionSelected: (option) {
                                  setState(() {
                                    selectedReligion = option;
                                  });
                                  Navigator.pop(context);
                                },
                              );
                            });
                        print("religion dialog box opend");
                      },
                      buttonColor: Colors.transparent,
                      buttonBorderRadius: 50,
                      buttonIcon: Icon(
                        Icons.add,
                        color: Colors.white,
                      )),
            ),
          ),
          Divider(
            thickness: 1,
            color: Color.fromARGB(111, 158, 158, 158),
          ),
        ],
      ),
    );






    // ignore_for_file: use_build_context_synchronously, prefer_const_constructors

import 'package:another_flutter_splash_screen/another_flutter_splash_screen.dart';
import 'package:flings_flutter/components/BottomNavigationBar.dart';
import 'package:flings_flutter/components/LoadingIcon.dart';
import 'package:flings_flutter/routes/routes.dart';
import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class LandingPage extends StatefulWidget {
  const LandingPage({super.key});

  @override
  State<LandingPage> createState() => _LandingPageState();
}

class _LandingPageState extends State<LandingPage> {
  final storage = FlutterSecureStorage();
  bool isLoading = true;

 

  // @override
  // void initState() {
  //   super.initState();
  //   getInitialRoute(context);
  // }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: FlutterSplashScreen.fadeIn(
      backgroundColor: Colors.white,
      
      onInit: () {
        debugPrint("On Init");
      },
      onEnd: () {
        debugPrint("On End");
      },
      childWidget: SizedBox(
        height: 500,
        width: 500,
        child: Image.asset("assets/images/icon.jpg"),
      ),
      
      onAnimationEnd: () => debugPrint("On Fade In End"),
      nextScreen: BottomNavigation(),
    ));
  }

  Future<void> getInitialRoute(BuildContext context) async {
    print("isLoaded before initState value:$isLoading");
    final storage = FlutterSecureStorage();
    var token;

    try {
      token = await storage.read(key: "token");
    } catch (e) {
      print(e.toString());
    }

    if (token != null) {
      print("Transfer to Bottom Navigation Page....Continue...please");
      
    } else {
      print("Navigate to Login Page.....Please Login ");
      Navigator.pushNamed(context, MyRoutes.loginPage);
    }

    print("isLoaded after initState value:$isLoading");
  }
}



onpressed: () {
                              Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                      builder: (context) => UpdateProfile()));
                            },